//WallAPI
//2015 NEPISAT
//ソース引用様: 今のところなし

#include "obj.as"
#module WallAPI
#include "user32.as"
/*
CofigGetBool : テキスト内のキーに対応した 真か偽を読み込みます)
ConfigGetBool(ファイル名 , キー) 戻り値: true=1,false =0
*/
#defcfunc ConfigGetBool str ConfigBool_FileName, str ConfigBool_Key
notesel ConfigBool_Note
noteload ""+ConfigBool_FileName
repeat notemax
ConfigBool_SearchKeyIndex=instr(ConfigBool_Note,cnt,ConfigBool_Key)
if(ConfigBool_SearchKeyIndex==-1){
	return -1
}else{
	ConfigBoolFalgIndex=cnt
}
await
loop
noteget ConfigBool_GetIndex,ConfigBoolFalgIndex
ConfigBoolFalse = instr(ConfigBool_GetIndex,ConfigBoolFalgIndex,"false")
ConfigBoolTrue = instr(ConfigBool_GetIndex,ConfigBoolFalgIndex,"true")
if(ConfigBoolFalse==-1 && ConfigBoolTrue==-1 || ConfigBoolFalse!=-1 && ConfigBoolTrue!=-1){
	return -1
}
if(ConfigBoolTrue!=-1){
	return 0
}
if(ConfigBoolFalse!=-1){
	return 1
}
return -1

//RoatCir : 回転する丸を表示します
//手抜きなせいで画面更新中は使えない
// RooatCir 全体のサイズ ,球のサイズ,表示X,表示Y,球の数,回数
#deffunc RoatCir double RoatSize,double RoatCirSize,int RoatX,int RoatY,int RoatCirCount,int RoatCount
dim active,10000
dim th,10000
defr=ginfo_r
defg=ginfo_g
defb=ginfo_b
ncount=0
repeat
redraw 0
color defr,defg,defb
boxf RoatX-(int(RoatSize)+int(RoatCirSize)),RoatY-(int(RoatSize)+int(RoatCirSize)),RoatX+int(RoatSize)+int(RoatCirSize)-1,RoatY+int(RoatSize)+int(RoatCirSize)-1
if ncount<100{
	if (cnt2/20 <= RoatCirCount){
		active(cnt2/20)=1
	}
	live=0
	repeat RoatCirCount
		if (active(cnt)=0){
			continue
		}
	live=live+1
		if th(cnt)<700 {
			c=cos(deg2rad(th(cnt)))
			y=RoatSize*c+RoatY
			x=-RoatSize*sin( deg2rad(th(cnt)) )+RoatX
			color 255-defr,255-defg,255-defg
			circle x-RoatCirSize,y-RoatCirSize,x+RoatCirSize,y+RoatCirSize,1
			th(cnt)=th(cnt)+(c+2)*(c+2)
		} else {
			active(cnt)=0
			th(cnt)=0
		}
	loop
	if live=0 : ncount=ncount+1
		cnt2++
	} else {
		cntii++
		if(cntii==RoatCount){
			break
		}
		cnt2=0
		ncount=0
	}
redraw 1
await 8
loop
dim active:dim th
return

//MoveObject : ボタン等のオブジェクトを動かします。
//複数ある場合配列として渡すと同期します。
//最終地点指定を間違えると永遠にリターンしません。 (ひどいとOSがフリーズ→強制再起)
// MoveObject オブジェクトのstat(配列),最終地点X,最終地点Y,スピード,モード
//モード一覧
//0 : X方向に加法
//1 : X方向に減法
//2,3 : 0と1のy版
//4,5,6,7:斜め(ry
#deffunc MoveObject array MoveObjectStat,int MoveObjectFX1,int MoveObjectFY1 ,int MoveObjectspeed1,int MoveObjectlr1
MoveObjectFX=MoveObjectFX1
MoveObjectFY=MoveObjectFY1
MoveObjectlr=MoveObjectlr1
MoveObjectspeed=MoveObjectspeed1

repeat length(MoveObjectStat)
		 MoveObjectHwnd.cnt=objinfo(MoveObjectStat.cnt,2)
		 getobjsize MoveObjectPos,MoveObjectStat.cnt
		 MoveObjectPX.cnt=MoveObjectPos.2
		 MoveObjectPY.cnt=MoveObjectPos.3
loop


repeat

	repeat length(MoveObjectStat)
	  SetWindowPos MoveObjectHwnd.cnt,0,MoveObjectPX.cnt,MoveObjectPY.cnt,0,0,1
	  switch MoveObjectlr
	  	case 0
	  		if(MoveObjectPX.cnt==MoveObjectFX){
				SwitchBreakFlag=1:break
	 　		}
	  		MoveObjectPX.cnt++
	  		swbreak
	  	case 1
	  	    if(MoveObjectPX.cnt==MoveObjectFX){
				SwitchBreakFlag=1:break
	 　		}
	  		MoveObjectPX.cnt--
	  		swbreak
	  	case 2
	  		if(MoveObjectPY.cnt==MoveObjectFY){
				SwitchBreakFlag=1:break
	 　		}
	  		MoveObjectPY.cnt++
	  		swbreak
	  	case 3
	  		if(MoveObjectPY.cnt==MoveObjectFY){
				SwitchBreakFlag=1:break
	 　		}
	  		MoveObjectPY.cnt--
	  		swbreak
	  	case 4
	  		if(MoveObjectPX.cnt==MoveObjectFX && MoveObjectPY.cnt==MoveObjectFY){
				SwitchBreakFlag=1:break
	 　		}
	  		MoveObjectPX.cnt++
	  		MoveObjectPY.cnt++
	  		swbreak
	  	case 5
	  		if(MoveObjectPX.cnt==MoveObjectFX && MoveObjectPY.cnt==MoveObjectFY){
				SwitchBreakFlag=1:break
	 　		}
	  		MoveObjectPX.cnt--
	  		MoveObjectPY.cnt--
	  		swbreak
	  	case 6
	  		if(MoveObjectPX.cnt==MoveObjectFX && MoveObjectPY.cnt==MoveObjectFY){
				SwitchBreakFlag=1:break
	 　		}
	  		MoveObjectPX.cnt++
	  		MoveObjectPY.cnt--
	  		swbreak
	  	case 7
	  		if(MoveObjectPX.cnt==MoveObjectFX && MoveObjectPY.cnt==MoveObjectFY){
				SwitchBreakFlag=1:break
	 　		}
	  		MoveObjectPX.cnt--
	  		MoveObjectPY.cnt++
	  		swbreak
	  	swend
	loop
	if(SwitchBreakFlag==1){
		break
	}
await MoveObjectspeed
loop
MoveObjectFX=0
MoveObjectFY=0
MoveObjectlr=0
MoveObjectspeed=0
SwitchBreakFlag=0
repeat length(MoveObjectPos)
		MoveObjectPos.cnt=0
loop
repeat length(MoveObjectStat)
		 MoveObjectHwnd.cnt=0
		 MoveObjectPX.cnt=0
		 MoveObjectPY.cnt=0
loop

return

#global
